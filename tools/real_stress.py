#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import time

def positive_int(value):
    ivalue = int(value)
    if ivalue <= 0:
        raise argparse.ArgumentTypeError("{} is not positive integer".format(value))
    return ivalue

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    sub_parsers = parser.add_subparsers(dest="command", help="stress a given milestone")
    sub_parsers.required = True
    parser_perfect = sub_parsers.add_parser("perfect", help="stress perfect links")
    parser_fifo = sub_parsers.add_parser("fifo", help="stress fifo broadcast")
    parser_agreement = sub_parsers.add_parser(
        "agreement", help="stress lattice agreement"
    )

    for subparser in [parser_perfect, parser_fifo, parser_agreement]:
        subparser.add_argument(
            "-t",
            "--time",
            required=True,
            dest="time",
            type=positive_int,
            help="Time in seconds to run",
            default=60
        )

        subparser.add_argument(
            "-r",
            "--runscript",
            dest="runscript",
            help="Path to run.sh",
            default="run.sh"
        )

        subparser.add_argument(
            "-l",
            "--logs",
            dest="logsDir",
            help="Directory to store stdout, stderr and outputs generated by the processes",
            default="logs"
        )

        subparser.add_argument(
            "-p",
            "--processes",
            type=positive_int,
            dest="processes",
            help="Number of processes that broadcast",
            default="128"
        )

    for subparser in [parser_perfect, parser_fifo]:
        subparser.add_argument(
            "-m",
            "--messages",
            type=positive_int,
            dest="messages",
            help="Maximum number (because it can crash) of messages that each process can broadcast",
            default=1000000
        )

    parser_agreement.add_argument(
        "-n",
        "--proposals",
        required=True,
        type=positive_int,
        dest="proposals",
        help="Maximum number (because it can crash) of proposal that each process can make",
    )

    parser_agreement.add_argument(
        "-v",
        "--proposal-values",
        required=True,
        type=positive_int,
        dest="proposal_max_values",
        help="Maximum size of the proposal set that each process proposes",
    )

    parser_agreement.add_argument(
        "-d",
        "--distinct-values",
        required=True,
        type=positive_int,
        dest="proposals_distinct_values",
        help="The number of distinct values among all proposals",
    )

    results = parser.parse_args()

    if results.command == "fifo":
        tools = os.path.dirname(os.path.realpath(sys.argv[0]))
        cmd = os.path.join(tools, "stress.py")
        cmd = [cmd, 'fifo','-r',results.runscript,'-l',results.logsDir,'-p',str(results.processes), '-m', str(results.messages)]
        p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        print("Executing")
        time.sleep(results.time)
        print("Cleaning up")
        out, err = p.communicate(input=b'\n')
        sys.stdout.flush()
        print(out.decode())
        print()
        print()

        delivered_cmd = os.path.join(tools, "delivered_messages.py")
        delivered = subprocess.run([delivered_cmd, str(results.processes), results.logsDir], stdout=subprocess.PIPE)
        print(delivered.stdout.decode())

        validate_cmd = os.path.join(tools, "fifo_stress_validate.py")
        validate = subprocess.run([validate_cmd, str(results.processes), results.logsDir], stdout=subprocess.PIPE)
        print(validate.stdout.decode())
    else:
        print("Command not supported currently")